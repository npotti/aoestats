define(["require","exports","knockout"],(function(require,e,s){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.default=new class{constructor(){this.aoeTeamsUrl="https://fopfpl.in/tes/api/teams",this.livescoresUrl="https://fopfpl.in/tes/api/player_live_scores",this.aoeTeams=[],this.fplBaseUrl="https://fantasy.premierleague.com/api/",this.fplPlayerMap=new Map,this.fplTeamsMap=new Map,this.curr_gw=1,this.finished=!1,this.fplId=s.observable(0),this.fplYcMap=new Map,this.userPicksMap=new Map,this.name=s.observable(""),this.team=s.observable(""),this.isFFFVisible=s.observable("Y"),this.isRRVisible=s.observable("Y"),this.isFOPVisible=s.observable("Y"),this.isCupVisible=s.observable("Y"),this.isPodcastVisible=s.observable("Y"),this.isLMSVisible=s.observable("Y"),this.isYCVisible=s.observable("Y"),this.isSetpieceVisible=s.observable("Y"),this.isCapPicksVisible=s.observable("Y"),this.isTransferVisible=s.observable("Y"),this.isStatsVisible=s.observable("Y"),this.isTStatsVisible=s.observable("Y"),this.isPStatsVisible=s.observable("Y"),this.isInjuriesVisible=s.observable("Y")}fetchPicks(e,s){return new Promise(t=>{fetch("https://fantasy.premierleague.com/api/entry/"+e+"/event/"+s+"/picks/").then(e=>e.json()).then(e=>{t(e)})})}fetchUserPicks(e){return new Promise(s=>{const t=[];let i=0;for(i=0;i<=this.curr_gw;i++){console.log("inside user picks "+i+" : "+this.curr_gw);const s=this.fetchPicks(e,i);t.push(s),s.then(e=>{const s=e;console.log("set user picks "+s.entry_history.event),this.userPicksMap.set(s.entry_history.event,s)})}Promise.all(t).then(e=>{s(!0)})})}fetchElementSummary(e){let s="https://fantasy.premierleague.com/api/element-summary/"+e+"/";return new Promise(e=>{fetch(s).then(e=>e.json()).then(s=>{e(s)})})}fetchFplMgrHistory(e){return new Promise(s=>{let t=this.fplBaseUrl+"entry/"+e+"/history/";fetch(t).then(e=>e.json()).then(e=>{s(e)})})}fetchAoeTeams(){return new Promise(e=>{let s=this.aoeTeamsUrl;fetch(s).then(e=>e.json()).then(s=>{const t=s;this.aoeTeams=t,e(this.aoeTeams)})})}fetchPlayerLiveScores(){return new Promise(e=>{let s=this.livescoresUrl;fetch(s).then(e=>e.json()).then(s=>{e(s)})})}fetchTeamName(e){let s="";switch(e){case 1:s="Peaky Blinders";break;case 2:s="Reservoir Dogs";break;case 3:s="Brooklyn 6-6";break;case 4:s="Dunder Mifflin";break;case 5:s="Sons of Anarchy";break;case 6:s="Watchmen";break;case 7:s="The Boys";break;case 8:s="True Detectives";break;case 9:s="F.R.I.E.N.D.S";break;case 10:s="Vikings"}return s}fetchTeamId(e){let s=0;switch(e){case"Peaky Blinders":s=1;break;case"Reservoir Dogs":s=2;break;case"Brooklyn 6-6":s=3;break;case"Dunder Mifflin":s=4;break;case"Sons of Anarchy":s=5;break;case"Watchmen":s=6;break;case"The Boys":s=7;break;case"True Detectives":s=8;break;case"F.R.I.E.N.D.S":s=9;break;case"Vikings":s=10}return s}roundToTwo(e){return Math.round(100*(e+Number.EPSILON))/100}fetchFPLPlayers(){return new Promise(e=>{fetch("https://fantasy.premierleague.com/api/bootstrap-static/").then(e=>e.json()).then(s=>{const t=s;t.teams&&t.teams.forEach(e=>{this.fplTeamsMap.set(e.id,e)}),t.elements&&t.elements.forEach(e=>{this.fplPlayerMap.set(e.id,e),this.fplYcMap.set(e.first_name+" "+e.second_name,e.yellow_cards)}),t.events&&t.events.forEach(e=>{e.is_current&&(this.curr_gw=e.id,this.finished=e.finished)}),e(!0)})})}fetchCurrGW(){return new Promise(e=>{let s=1;1!==this.curr_gw?(s=this.curr_gw,e(s)):this.fetchFPLPlayers().then(t=>{s=this.curr_gw,e(s)})})}}}));